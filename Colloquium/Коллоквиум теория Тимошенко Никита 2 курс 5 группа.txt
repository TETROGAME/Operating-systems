1. Что такое ООП?
Ответ: ООП - парадигма программирования, основанная особенность которой заключается в том, что программа рассматривается как набор объектов со своими свойствами и взаимодействующих друг с другом.
2. Объектно ориентированная декомпозиция
Ответ: Объектно-ориентированная декомпозиция - метод разбиения сложной системы на отдельные объекты, которые отражают реальные или логические сущности предметной области. Каждый объект объединяет поля и методы, относящиеся к этим данным.

3. Дизайн ПО - определение, примеры
Ответ: Дизайн программного обеспечения - процесс проектирования архитектуры, компонентов, интерфейсов, данных системы чтобы реализовать ее требования. Примеры: проектирование MVC-архитектуры в веб-приложении, проектирование REST API для мобильного приложения, создание структуры баз данных для системы бронирования.
4. Магическое число 7 Миллера в контексте АйТи (не менее 7 примеров из АйТи)
Ответ: Число 7 связано с законом Миллера - результатом психологических исследований Джорджа Миллера, который утверждал, что человек может удерживать в кратковременной памяти около 7 элементов информации. В АйТи этот принцип используется при проектировании интерфейсов, алгоритмов и архитектуры, чтобы учитывать когнитивные ограничения человека.
Примеры:
1)Оптимальное количество пунктов меню на сайте - 6-8, чтобы пользователь мог быстро охватить взглядом.
2)Формы обычно содержат не более 7 значимых полей (например, при регистрации).
3)Интерактивные доски (типа Trello) рекомендуют не более 7 активных задач на участника.
4)В функции стоит передавать < 7 параметров
5)Вкладки/иконки обычно ограничены 7-ю штуками
6)Многослойная архитектура обычно ограничивается 7-ю слоями.
7)Пункты в меню в IDE - тоже около 7  
5. 5 признаков сложных систем по Гради Бучу (привести не менее 3 примеров АйТи систем, провести их через каждый из признаков)
Ответ: 
1)Иерархичность — система состоит из подсистем, те из модулей, и так далее.
2)Относительная независимость уровней — изменения в одном уровне минимально влияют на другие.
3)Множественность представлений — система может быть описана разными моделями (например, структурной и поведенческой).
4)Абстракция — скрытие деталей и выделение существенных характеристик.
5)Эволюция — система развивается во времени, адаптируясь к новым требованиям.
Примеры:
1)Система управления версиями Git
Иерархичность:          	Репозиторий - ветки - коммиты - файлы
Независимость уровней:  	Изменения в ветке не влияют на другие
Множественность представлений:	Лог изменений, граф ветвления, дерево каталогов
Абстракция:			Пользователь работает с командами, не видя внутреннего хранения
Эволюция: 			Git постоянно обновляется и развивается
2)Веб-приложение
Иерархичность:			Интерфейс → сервер → база данных
Независимость уровней:		Можно изменить фронтенд без изменений в базе
Множественность представлений:	UML-диаграммы, ER-модели, диаграммы последовательностей
Абстракция:			Пользователь работает не с запросами в БД, а с карточками товаров
Эволюция:			Добавление новых функций
3)Операционная система
Иерархичность:			Ядро - драйверы - системные службы - пользовательские процессы
Независимость уровней:		Изменение драйвера не требует переписывать ядро
Множественность представлений:	Систему можно рассматривать как набор процессов, как файловую структуру, как ядро с API
Абстракция:			Пользователь не видит деталей работы ядра
Эволюция:			Новые версии ядра с расширенными возможностями